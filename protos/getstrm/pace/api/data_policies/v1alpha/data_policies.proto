syntax = "proto3";

package getstrm.pace.api.data_policies.v1alpha;

import "buf/validate/validate.proto";
import "getstrm/pace/api/entities/v1alpha/entities.proto";
import "getstrm/pace/api/paging/v1alpha/paging.proto";
import "google/api/annotations.proto";

option go_package = "github.com/getstrm/pace/protos/api/data_policies;data_policies";
option java_multiple_files = true;
option java_package = "com.getstrm.pace.api.data_policies.v1alpha";

service DataPoliciesService {
  // Lists all DataPolicies for all platforms.
  rpc ListDataPolicies(ListDataPoliciesRequest) returns (ListDataPoliciesResponse) {
    option (google.api.http) = {get: "/data-policies"};
  }
  // Evaluates a previously upserted DataPolicy against a provided data sample. Platform-specific data types, transforms
  // and nested fields are not supported.
  rpc EvaluateDataPolicy(EvaluateDataPolicyRequest) returns (EvaluateDataPolicyResponse) {
    option (google.api.http) = {
      post: "/v1alpha/data-policies/{data_policy_id}/{platform_id}/evaluate"
      body: "*"
    };
  }
  // Creates or updates a DataPolicy in PACE and optionally applies it to the processing platform.
  rpc UpsertDataPolicy(UpsertDataPolicyRequest) returns (UpsertDataPolicyResponse) {
    option (google.api.http) = {
      post: "/v1alpha/data-policies"
      body: "*"
    };
  }
  // Applies an existing DataPolicy to the processing platform.
  rpc ApplyDataPolicy(ApplyDataPolicyRequest) returns (ApplyDataPolicyResponse) {
    option (google.api.http) = {post: "/v1alpha/data-policies/{data_policy_id}/{platform_id}"};
  }
  // Returns the latest policy for a given id and platform.
  rpc GetDataPolicy(GetDataPolicyRequest) returns (GetDataPolicyResponse) {
    option (google.api.http) = {get: "/v1alpha/data-policies/{data_policy_id}/{platform_id}"};
  }
  
  rpc ScanLineage(ScanLineageRequest) returns (ScanLineageResponse) {
    option (google.api.http) = {get: "/v1alpha/data-policies/lineage"};
  }
}

message GetDataPolicyRequest {
  string data_policy_id = 1 [(buf.validate.field).string.min_len = 1];
  string platform_id = 2 [(buf.validate.field).string.min_len = 1];
}

message GetDataPolicyResponse {
  entities.v1alpha.DataPolicy data_policy = 1;
}

message UpsertDataPolicyRequest {
  entities.v1alpha.DataPolicy data_policy = 1;
  // whether to apply the policy directly on the processing platform
  // if omitted, defaults to false
  bool apply = 2;
}

message UpsertDataPolicyResponse {
  entities.v1alpha.DataPolicy data_policy = 1;
}

message ApplyDataPolicyRequest {
  string data_policy_id = 1 [(buf.validate.field).string.min_len = 1];
  string platform_id = 2 [(buf.validate.field).string.min_len = 1];
}

message ApplyDataPolicyResponse {
  entities.v1alpha.DataPolicy data_policy = 1;
}

message ListDataPoliciesRequest {
  api.paging.v1alpha.PageParameters page_parameters = 2;
}

message ListDataPoliciesResponse {
  repeated entities.v1alpha.DataPolicy data_policies = 1;
  api.paging.v1alpha.PageInfo page_info = 2;
}


message ScanLineageRequest {
  api.paging.v1alpha.PageParameters page_parameters = 2;
}

message ScanLineageResponse {
  repeated entities.v1alpha.LineageSummary lineage_summaries = 1;
  api.paging.v1alpha.PageInfo page_info = 2;
}

message EvaluateDataPolicyRequest {
  oneof data_policy {
    option (buf.validate.oneof).required = true;
    pace.api.entities.v1alpha.DataPolicy inline_data_policy = 1;
    entities.v1alpha.DataPolicyRef data_policy_ref = 2;
  }

  // Evaluate a data policy for these principals against a sample of data.
  // If left empty, the policy will be evaluated against all principals.
  // In order to evaluate the policy for a principal that does not occur in the policy, add a
  // principal message without the `principal` field set. This will be treated as the `other` principal.
  repeated entities.v1alpha.DataPolicy.Principal principals = 3;

  oneof sample_data {
    option (buf.validate.oneof).required = true;
    // CSV-formatted sample data to evaluate the policy against. The first row must be a header row.
    CsvSample csv_sample = 4;
  }

  message CsvSample {
    // The CSV-formatted sample data to evaluate the policy against. The first row must be a header row.
    string csv = 1;
  }
}

message EvaluateDataPolicyResponse {
  // The results of the evaluation, grouped by rule set.
  repeated RuleSetResult rule_set_results = 1;

  message RuleSetResult {
    // The target of the evaluated rule set.
    entities.v1alpha.DataPolicy.Target target = 1;
    // A result is returned for each principal specified in the rule set, as
    // well as the case where there is no matching principal.
    repeated EvaluationResult evaluation_results = 2;

    message EvaluationResult {
      // The principal that was evaluated. If absent, this is the result for the case where there is no matching principal.
      optional entities.v1alpha.DataPolicy.Principal principal = 1;
      // The result of the evaluation.
      oneof evaluation {
        // The result of the evaluation in CSV format, including headers.
        CsvEvaluation csv_evaluation = 2;
      }

      message CsvEvaluation {
        // The result of the evaluation in CSV format, including headers.
        string csv = 1;
      }
    }
  }
}
