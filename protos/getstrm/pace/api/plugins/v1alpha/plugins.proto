syntax = "proto3";

package getstrm.pace.api.plugins.v1alpha;

import "buf/validate/validate.proto";
import "getstrm/pace/api/entities/v1alpha/entities.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/getstrm/pace/protos/api/plugins;plugins";
option java_multiple_files = true;
option java_package = "com.getstrm.pace.api.plugins.v1alpha";


service PluginsService {
  rpc ListPlugins(ListPluginsRequest) returns (ListPluginsResponse) {
    option (google.api.http) = {
      get: "/v1alpha/plugins"
    };
  }

  rpc InvokeDataPolicyGenerator(InvokeDataPolicyGeneratorRequest) returns (InvokeDataPolicyGeneratorResponse) {
    option (google.api.http) = {
      post: "/v1alpha/plugins/data-policy-generators/{plugin_id}"
      body: "*"
    };
  }
}

message InvokeDataPolicyGeneratorRequest {
  // The identifier of the plugin to invoke. If only one implementation of the plugin type exists, that will be invoked implicitly. The plugin should be of type DATA_POLICY_GENERATOR.
  optional string plugin_id = 1;
  google.protobuf.Any payload = 2 [(buf.validate.field).required = true];
}

message InvokeDataPolicyGeneratorResponse {
  pace.api.entities.v1alpha.DataPolicy data_policy = 1;
}

message ListPluginsRequest {
}

message ListPluginsResponse {
  repeated Plugin plugins = 1;
}

message Plugin {
  // The unique identifier for this plugin
  string id = 1;
  // The canonical class name of the implementation of this plugin
  string implementation = 2;
  // The type / category of this plugin
  PluginType plugin_type = 3;
}

enum PluginType {
  PLUGIN_TYPE_UNSPECIFIED = 0;
  DATA_POLICY_GENERATOR = 1;
}
