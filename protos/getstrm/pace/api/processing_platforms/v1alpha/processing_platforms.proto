syntax = "proto3";

package getstrm.pace.api.processing_platforms.v1alpha;
import "getstrm/pace/api/entities/v1alpha/entities.proto";
import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "getstrm/pace/api/paging/v1alpha/paging.proto";
import "google/rpc/error_details.proto";

option go_package = "github.com/getstrm/pace/protos/api/processing_platforms;processing_platforms";
option java_package = "com.getstrm.pace.api.processing_platforms.v1alpha";
option java_multiple_files = true;

service ProcessingPlatformsService {
    // Lists all configured processing platforms.
    rpc ListProcessingPlatforms (ListProcessingPlatformsRequest) returns (ListProcessingPlatformsResponse) {
        option (google.api.http) = {
          get: "/v1alpha/processing-platforms"
        };
    };
  // Lists all databases for the given processing_platform.
  rpc ListDatabases (ListDatabasesRequest) returns (ListDatabasesResponse) {
    option (google.api.http) = {
      get: "/v1alpha/processing-platforms/{platform_id}/databases"
    };
  }
  // Lists all schemas (for a given database, if applicable).
  rpc ListSchemas (ListSchemasRequest) returns (ListSchemasResponse) {
    option (google.api.http) = {
      get: "/v1alpha/processing-platforms/{platform_id}/schemas"
    };
  }
    // Lists all available table names for the given platform.
    rpc ListTables (ListTablesRequest) returns (ListTablesResponse) {
        option (google.api.http) = {
          get: "/v1alpha/processing-platforms/{platform_id}/tables"
        };
    };
    // Lists all available user groups for the given platform.
    rpc ListGroups (ListGroupsRequest) returns (ListGroupsResponse) {
        option (google.api.http) = {
          get: "/v1alpha/processing-platforms/{platform_id}/groups"
        };
    };
    // Returns a data policy without any rule sets, based on the given table's data structure in the platform.
    // Extend this blueprint policy with field transforms and/or rule sets to create a complete data policy.
    // Use the UpsertDataPolicy endpoint to save and enforce the policy.
    rpc GetBlueprintPolicy (GetBlueprintPolicyRequest) returns (GetBlueprintPolicyResponse) {
        option (google.api.http) = {
          get: "/v1alpha/processing-platforms/{platform_id}/tables/{table_id}/blueprint-policy"
        };
    };

    rpc GetLineage (GetLineageRequest) returns (GetLineageResponse) {
      option (google.api.http) = {
        get: "/v1alpha/processing-platforms/{platform_id}/tables/{fqn}/lineage"
      };
    }
}

message ListProcessingPlatformsRequest {
}

message ListProcessingPlatformsResponse {
    repeated entities.v1alpha.ProcessingPlatform processing_platforms = 1;
}

message ListDatabasesRequest {
  string platform_id = 1 [(buf.validate.field).string = {min_len: 1}];
  api.paging.v1alpha.PageParameters page_parameters = 2;
}

message ListDatabasesResponse {
  repeated entities.v1alpha.Database databases = 1;
  api.paging.v1alpha.PageInfo page_info = 2;
}

message ListSchemasRequest {
  string platform_id = 1 [(buf.validate.field).string = {min_len: 1}];
  optional string database_id = 2;
  api.paging.v1alpha.PageParameters page_parameters = 3;
}

// (-- api-linter: core::0158::response-plural-first-field=disabled
//     aip.dev/not-precedent: Schemata? Get real. --)
message ListSchemasResponse {
  repeated entities.v1alpha.Schema schemas = 1;
  api.paging.v1alpha.PageInfo page_info = 2;
}


message ListTablesRequest {
  string platform_id = 1 [(buf.validate.field).string = {min_len: 1}];
  optional string database_id = 2;
  optional string schema_id = 3;
  api.paging.v1alpha.PageParameters page_parameters = 4;
}

message ListTablesResponse {
  repeated entities.v1alpha.Table tables = 1;
  api.paging.v1alpha.PageInfo page_info = 2;
}

message ListGroupsRequest {
  string platform_id = 1 [(buf.validate.field).string = {min_len: 1}];
  api.paging.v1alpha.PageParameters page_parameters = 2;
}

message ListGroupsResponse {
  repeated string groups = 1;
  api.paging.v1alpha.PageInfo page_info = 2;
}

message GetBlueprintPolicyRequest {
    string platform_id = 1 [(buf.validate.field).string = {min_len: 1}];
    entities.v1alpha.Table table = 2;
    string fqn = 3;
}

message GetBlueprintPolicyResponse {
    entities.v1alpha.DataPolicy data_policy = 1;
    google.rpc.BadRequest.FieldViolation violation = 2;
}

message GetLineageRequest {
  string platform_id = 1 [(buf.validate.field).string = {min_len: 1}];
  string fqn = 3;
}

message GetLineageResponse {
  entities.v1alpha.LineageSummary lineage_summary = 1;
}
