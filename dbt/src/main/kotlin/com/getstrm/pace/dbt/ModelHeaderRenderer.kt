package com.getstrm.pace.dbt

import build.buf.gen.getstrm.pace.api.entities.v1alpha.DataPolicy
import build.buf.gen.getstrm.pace.api.entities.v1alpha.ProcessingPlatform

/**
 * Renders a Jinja "header" for a data policy.
 */
class ModelHeaderRenderer(private val policy: DataPolicy, private val sourceModel: DbtModel) {
    private val config = Config()
    private val header = StringBuilder()

    companion object {
        private const val AUTO_GENERATED_WARNING = """{#
This file was auto-generated by PACE. Do not edit this file directly.
#}
"""
    }

    fun render(ruleSetIndex: Int = 0): String {
        val ruleSet = policy.ruleSetsList[ruleSetIndex]
        header.append(AUTO_GENERATED_WARNING)
        config.add("materialized='view'")
        configureDatabaseAndSchema(ruleSet)
        authorizeBigQueryView()

        // Finalize
        header.append(config.render())
        header.append("\n")
        return header.toString()
    }

    private fun configureDatabaseAndSchema(ruleSet: DataPolicy.RuleSet) {
        val sourceResourcePathList =
            listOf(sourceModel.database, sourceModel.schema, sourceModel.name)
        val targetResourcePathList = ruleSet.target.ref.resourcePathList
        check(targetResourcePathList.size == 3) {
            "Expected target to have 3 resource path elements, but got " +
                "${targetResourcePathList.map { it.name }}."
        }
        if (targetResourcePathList.first().name != sourceResourcePathList.first()) {
            config.add("database='${targetResourcePathList.first().name}'")
        }
        if (targetResourcePathList[1].name != sourceResourcePathList[1]) {
            config.add("schema='${targetResourcePathList[1].name}'")
        }
    }

    private fun authorizeBigQueryView() {
        if (policy.source.ref.platform.platformType == ProcessingPlatform.PlatformType.BIGQUERY) {
            config.add(
                """grant_access_to=[
       {'project': '${sourceModel.database}', 'dataset': '${sourceModel.schema}'}
     ]""",
            )
        }
    }

    private class Config(private val configs: MutableList<String> = mutableListOf()) :
        MutableList<String> by configs {
        fun render(): String {
            return "{{ config(\n${
                configs.joinToString(
                    prefix = "     ",
                    separator = ",\n     ",
                )
            }\n   )\n}}"
        }
    }
}
